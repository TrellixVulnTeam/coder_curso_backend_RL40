<div id="gridprods"></div>

<div class="px-4 py-4  grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
    {{#each arr_prods}}
    <div class="card transition-all">
        <img src="{{this.imageurl}}" alt="">
        <div class="p-4 flex flex-col gap-4">
            <div class="flex pb-2 gap-4 w-full justify-between text-center items-center">
                <h3 class="text-gray-600 w-full text-base">
                    <span class="uppercase text-base font-semibold">{{this.nombre}}</span>
                </h3>
            </div>
            <div class="flex justify-center items-center relative text-center">
                <p>
                    <span class="font-bold text-xl">
                        $ {{this.precio}}
                    </span>
                </p>
            </div>
            <div class="w-full flex items-center justify-center">
                {{#if this.check}}
                <button class="bg-red-500 whitespace-nowrap uppercase text-sm text-white rounded-sm px-2 py-1"
                    title="Agregar producto al carrito" onclick="return deleteProd_xcarro({{json this}})">
                    Eliminar del carrito
                </button>
                {{else}}
                <button class="bg-purple-500 uppercase text-sm text-white rounded-sm px-2 py-1"
                    title="Agregar producto al carrito" onclick="return addProd_xcarro({{json this}})">
                    Agregar al carrito
                </button>
                {{/if}}
            </div>
        </div>
    </div>
    {{/each}}
</div>

<style>
    .card {
        border-radius: 10px;
        position: relative;
    }

    .card:hover {
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 30%);
        background: white;
    }
</style>

<script>
    let carroJS = [];
    const newCarro = async (user) => {
        const url = `/carrito`;
        // const prod = arr_prodsHome.find((e) => e.id === id);
        const options = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(user),
        };
        const re = await fetch(url, options);
        if (re.ok) {
            const resCarro = await re.json();
            carroJS = resCarro;
        }
    }

    const addProd_xcarro = async (prod) => {
        if(!carroJS.id) carroJS = {{{ json carro }}};
        const user = {{{ json user }}};
        if (!carroJS) await newCarro(user);
        carroJS.productos.push(prod);
        const url = `/carrito/${carroJS.id}/productos`;
        const options = {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(carroJS),
        };
        const re = await fetch(url, options);
        if (re.ok) {
            if (re.url.split("?Mesage=").length > 1) {
                const corte = re.url.split("/session/login/")[1];
                const path = `/session/login/${corte}`;
                goLink(path);
            }
            window.location = "/";
        }
    };

    const deleteProd_xcarro = async (prod) => {
        if(!carroJS.id) carroJS = {{{ json carro }}};
        const url = `/carrito/${carroJS.id}/productos`;
        carroJS.productos = carroJS.productos.filter(p => p.id !== prod.id);
        const options = {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(carroJS),
        };
        const re = await fetch(url, options);
        if (re.ok) {
            if (re.url.split("?Mesage=").length > 1) {
                const corte = re.url.split("/session/login/")[1];
                const path = `/session/login/${corte}`;
                goLink(path);
            }
            window.location = "/";
        }
    };
</script>